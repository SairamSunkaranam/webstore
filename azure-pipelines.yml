# This is Web application pipeline - test

trigger:
  branches:
    include:
      - main
  paths:
    exclude:
      - 'README.md'

pool:
  vmImage: ubuntu-latest

variables:
  buildConfig: 'Release'
  subscription: 'Azure Cloud1'
  appNameDev: 'web1-webstore-app-dev'
  appNameProd: 'web1-webstore-app'
  testUrl: "https://web1-webstore-app-dev-dse3e2ggcad4ebbh.centralus-01.azurewebsites.net/Cart"

resources:
  repositories:
    - repository: 'StoreCoreTests'
      type: git
      name: my-project/StoreCoreTests
    - repository: 'webUITests'
      type: git
      name: my-project/webUITests

stages:
- stage: BuildStage
  displayName: 'Build Stage'

  jobs:
  - job: BuildAndPublish
    displayName: 'Build and Publish Job'
    steps:
    
    - checkout: StoreCoreTests
    - checkout: self

    - task: UseDotNet@2
      displayName: 'Use .NET 6'
      inputs:
        version: '6.x'
    
    - task: NuGetAuthenticate@1
    
    - script: echo "This is a manual approval run"
      displayName: "--MANUAL RUN--"
      condition: eq(variables['Build.Reason'], 'Manual')

    - task: DotNetCoreCLI@2
      displayName: '.NET restore'
      inputs:
        command: 'restore'
        projects: 'webstore/*.csproj'
        feedsToUse: 'config'
        nugetConfigPath: 'webstore/nuget.config'

    - task: DotNetCoreCLI@2
      displayName: '.NET Build'
      inputs:
        command: 'build'
        projects: 'webstore/*.csproj'
        arguments: '--configuration $(buildConfig)'
    
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: 'StoreCoreTests/*.csproj'
        arguments: '--configuration $(buildConfig) --logger trx --results-directory $(Agent.TempDirectory)'
        publishTestResults: false
    
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: '**/*.trx'
        searchFolder: '$(Agent.TempDirectory)'
    
    - task: DotNetCoreCLI@2
      displayName: '.NET Publish'
      inputs:
        command: 'publish'
        projects: 'webstore/*.csproj'
        arguments: '--configuration $(buildConfig) --output $(Build.ArtifactStagingDirectory)'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(Build.ArtifactStagingDirectory)'
        artifact: 'webstore-dll'
        publishLocation: 'pipeline'

- stage: DevStage
  displayName: 'Dev Stage'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  pool:
    vmImage: windows-latest

  jobs:
  - deployment: DevDeploy
    displayName: 'Deploy Dev'
    environment: 'DEV'
    strategy:
      runOnce:
        deploy:
    
          steps:
          - task: AzureWebApp@1
            inputs:
              azureSubscription: '$(subscription)'
              appType: 'webAppLinux'
              appName: '$(appNameDev)'
              package: '$(Pipeline.Workspace)/**/*.zip'
              runtimeStack: 'DOTNETCORE|6.0'
          
          - checkout: webUITests
          - task: UseDotNet@2
            displayName: 'Use .NET 6'
            inputs:
              version: '6.x'

          - task: DotNetCoreCLI@2
            displayName: '.NET restore'
            inputs:
              command: 'restore'
              projects: '**/*.csproj'
          
          - task: DotNetCoreCLI@2
            env:
              testUrl: '$(testUrl)'
            inputs:
              command: 'test'
              projects: '**/*.csproj'
              arguments: '--configuration $(buildConfig) --logger trx --results-directory $(Agent.TempDirectory)'
              publishTestResults: false
          
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'VSTest'
              testResultsFiles: '**/*.trx'
              searchFolder: '$(Agent.TempDirectory)'


- stage: ProdStage
  displayName: 'Prod Stage'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))

  jobs:
  - deployment: ProdDeploy
    displayName: 'Deploy Prod'
    environment: 'PROD'
    strategy:
      runOnce:
        deploy:
    
          steps:
          - task: AzureWebApp@1
            inputs:
              azureSubscription: '$(subscription)'
              appType: 'webAppLinux'
              appName: '$(appNameProd)'
              package: '$(Pipeline.Workspace)/**/*.zip'
              runtimeStack: 'DOTNETCORE|6.0'

    